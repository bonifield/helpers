# examples of removing whitespace
# tested with 8.5.2
#
# to use this example:
#	place this config "clean-whitespace.conf" in the logstash conf.d directory
#	test the config then start logstash
#		sudo bin/logstash -f conf.d/clean-whitespace.conf --config.test_and_exit
#		sudo bin/logstash -f conf.d/clean-whitespace.conf --config.reload.automatic

# generate test data
input {
	generator {
		ecs_compatibility => "v8"
		count => 1
	}
}

# prep example data
filter {
	# create example data to be cleaned
	mutate {
		add_field => {
			"[user1][original]" => "    john.doe 	"
			"[user2][original]" => " jane .doe		"
			"[user3][original]" => "	bob. alice		"
		}
	}
	# preserve originals
	mutate {
		copy => {
			"[user1][original]" => "[user1][cleaned]"
			"[user2][original]" => "[user2][semi_cleaned]"
			"[user3][original]" => "[user3][cleaned]"
		}
	}
}

# clean whitespace
filter {
	# using gsub statement to affect whitespace in any position
	mutate {
		gsub => [ "[user1][cleaned]", "\s+", "" ]
	}
	# using strip for leading and trailing whitespace (does NOT affect anything in the middle of a value)
	mutate {
		strip => [ "[user2][semi_cleaned]" ]
	}
	# using a Ruby code block to affect whitespace in any position
	ruby {
		code => '
			item = event.get("[user3][original]")
			item = item.gsub(/\s+/, "")
			event.set("[user3][cleaned]", item)
			event.set("[user3][cleaned_one_liner]", event.get("[user3][original]").gsub(/\s+/, ""))
		'
	}
}

# cleanup so only relevant example data is shown
filter {
	prune {
		whitelist_names => [ "user.*" ]
	}

}

output {
	stdout { codec => rubydebug }
}



#
#
#
# EXPECTED OUTPUT
#
#
#
#	{
#	    "user1" => {
#	        "original" => "    john.doe \t",
#	         "cleaned" => "john.doe"
#	    },
#	    "user2" => {
#	            "original" => " jane .doe\t\t",
#	        "semi_cleaned" => "jane .doe"
#	    },
#	    "user3" => {
#	                 "original" => "\tbob. alice\t\t",
#	                  "cleaned" => "bob.alice",
#	        "cleaned_one_liner" => "bob.alice"
#	    }
#	}
