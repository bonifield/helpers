# bin/logstash -f conf.d/base64.conf --config.test_and_exit
# bin/logstash -f conf.d/base64.conf --config.reload.automatic

input {
	generator {
		count => 1
		lines => [
			"abcd1234"
		]
	}
}

#================================================
# plain string fields
#================================================
filter {
	# base64 encode some value
	ruby {
		code => '
			msg = event.get("[message]")
			if msg
				event.set("[message_encoded]", Base64.encode64(msg))
			end
		'
	}
	# strip whitespace (optional) then base64 decode
	ruby {
		code => '
			msgenc = event.get("[message_encoded]").strip
			if msgenc
				event.set("[message_decoded]", Base64.decode64(msgenc))
			end
		'
	}
}

#================================================
# decode encoded JSON string to create nested fields
#================================================
filter {
	# create example JSON string field
	mutate {
		add_field => {
			"[example][string]" => '{"topkey":{"midkey":{"botkey":"botval"}}}'
		}
	}
	# base64 encode the string to simulate receiving it that way
	ruby {
		code => '
			rawstringfield = event.get("[example][string]")
			if rawstringfield
				event.set("[example][encoded][longstring]", Base64.encode64(rawstringfield))
			end
		'
	}
	# strip whitespace then base64 decode the "received" json string
	ruby {
		code => '
			encodedlongstring = event.get("[example][encoded][longstring]").strip
			if encodedlongstring
				event.set("[example][decoded][longstring]", Base64.decode64(encodedlongstring))
			end
		'
	}
	# process the decoded string into nested fields
	json {
		source => "[example][decoded][longstring]"
		target => "[parsed_json_output]"
	}
}

output {
	stdout { codec => rubydebug }
}

# expected output (condensed)
# {
#             "message" => "abcd1234",
#     "message_encoded" => "YWJjZDEyMzQ=\n",
#     "message_decoded" => "abcd1234",
#             "example" => {
#          "string" => "{\"topkey\":{\"midkey\":{\"botkey\":\"botval\"}}}",
#         "encoded" => {
#             "longstring" => "eyJ0b3BrZXkiOnsibWlka2V5Ijp7ImJvdGtleSI6ImJvdHZhbCJ9fX0=\n"
#         },
#         "decoded" => {
#             "longstring" => "{\"topkey\":{\"midkey\":{\"botkey\":\"botval\"}}}"
#         },
#        "parsed_json_output" => {
#         "topkey" => {
#             "midkey" => {
#                 "botkey" => "botval"
#             }
#         }
#     }
# }
