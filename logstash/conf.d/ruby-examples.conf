# https://www.elastic.co/guide/en/logstash/current/plugins-filters-ruby.html
#
# bin/logstash -f conf.d/ruby-examples.conf --config.test_and_exit
# bin/logstash -f conf.d/ruby-examples.conf --config.reload.automatic
#
# use single quotes around the code and double quotes inside to support variable expansion using #{variable} syntax
#
# event.get("[field]")
# event.get("[field]").method
# variable = event.get("[field]").method
# event.set("[field]", variable)
# "X is #{variable} units."
# event.set("[field]", "value")
# event.set("[field]", event.get("[field]")


input {
	generator {
		ecs_compatibility => "v8"
		count => 1
	}
}

filter {
	# add arbitrary tags used by some examples
	mutate {
		add_tag => [ "tag-001", "tag-002" ]
	}
}

#================================================
# Ruby code examples begin here
#================================================

# global ($) variables - shared globally; best to avoid
# class (@@) variables - shared by all ruby filters; exercise extreme caution or avoid modifying these
# instance (@) variables - shared between different events in the same ruby filter and all local threads; exercise caution or avoid modifying these

# strings
filter {
	ruby {
		id => "ruby_new_string_field"
		# init runs once at startup time
		# init must use global ($), class (@@), or instance (@) variables
		# other ruby functions can access @@ or $ variables which are not thread safe
		# instance variables (@) are thread safe and only exist within their filters
		init => '
			# initialize static variables at startup time
			@mystring = "This Is A String."
		'
		code => '
			# create a new string field
			event.set("[new_string][default]", @mystring)
			# the following methods do not affect the @mystring object
			# downcase (lowercase)
			event.set("[new_string][downcase]", @mystring.downcase)
			# upcase (uppercase)
			event.set("[new_string][upcase]", @mystring.upcase)
			# capitalize the first letter)
			event.set("[new_string][capitalize]", @mystring.capitalize)
			# cast integer as string
			num = 4
			num2 = 4.to_s
			# or num.to_s
			event.set("[new_string][cast_to_string]", num2)
		'
	}
}


# for-each loop - with index values
#
# string conversions
# to_s converts to a string, but it can also take a base argument
# to_s(2) converts to binary
# to_s(16) converts to hex
filter {
	ruby {
		id => "ruby_eachwithindex"
		code => '
			# key/value (hash) loop
			# instead of .each, use .each_with_index to access the index value
			# loops over [tags] and uses the array items as keys, and accesses the index as a value (index is not available in .each)
			event.get("[tags]").each_with_index do |key,val|
				if key == "tag-001"
					# arbitrarily multiply the index value
					v = (val+1) * 47
					# prepend 0x, convert to hex, then upcase
					v = "0x" + v.to_s(16).upcase
					event.set("[new_array][hexxed]", v)
				end
			end
		'
	}
}

# for-each loop - no index values
filter {
	ruby {
		id => "ruby_forloop"
		code => '
			# for-each loop
			# creates new fields with upcase values based for each tag in [tags]
			event.get("[tags]").each do |item|
				if item == "tag-001"
					event.set("[new_array][tag-001]", item.upcase)
				elsif item == "tag-002"
					event.set("[new_array][tag-002]", item.capitalize)
				end
			end
		'
	}
}

# compare multiple arrays using nested loops
filter {
	ruby {
		id => "ruby_array_comparison"
		code => '
			#arr1 = event.get("[host][ip]")
			#arr2 = event.get("[test][ip]")
			arr1 = [ "192.168.99.99", "fe80::1234:5678:1a:2bcd" ]
			arr2 = [ "192.168.99.99", "fe80::1234:5678:1a:2bcd" ]
			arr1.each do |item1|
				arr2.each do |item2|
					if item1 == item2
						if event.get("[tags]")
							event.set("[tags]", event.get("[tags]") << "match_"+item1)
						else
							event.set("[tags]", ["match_"+item1])
						end
					end
				end
			end
		'
	}
}

# create an array; append values to arrays
filter {
	ruby {
		id => "ruby_new_array_field"
		code => '
			# create a new array field using square brackets around the value
			event.set("[new_array][items]", ["this is a new object in an array"])
			# length of an array
			event.set("[new_array][tag_length]", event.get("[tags]").length)
			# count of an array - same and length but can start at an offset
			event.set("[new_array][tag_count]", event.get("[tags]").count)
			#
			# append a new item to an array, with additional demonstration
			ar_count = event.get("[new_array][items]").count
			ar_count = "There is #{ar_count} item before this value"
			event.set("[new_array][items]", (event.get("[new_array][items]") << ar_count))
		'
	}
}

# join arrays, split strings into arrays
filter {
	ruby {
		id => "ruby_join_split_array"
		code => '
			# join an array into a string with a delimiter
			event.set("[new_array][joined]", event.get("[new_array][items]").join("+++"))
			# split a string based on a delimiter
			event.set("[new_array][split]", event.get("[new_array][joined]").split("+++"))
			# split then re-join with a new delimiter
		'
	}
}

# append a string to [tags]
filter {
	ruby {
		id => "ruby_append_string_to_tags"
		init => '
			@static_string = "my-new-tag"
		'
		code => '
			event.set("[tags]", (event.get("[tags]") << @static_string))
		'
	}
}

# append one array to another arrays
filter {
	ruby {
		id => "ruby_append_array_to_tags"
		code => '
			event.set("[tags]", (event.get("[tags]").push(*event.get("[new_array][items]"))))
		'
	}
}

# create a new array field by combining existingo ones
filter {
	ruby {
		id => "ruby_combine_arrays"
		code => '
			event.set("[supertag]", (event.get("[tags]") + event.get("[new_array][items]")))
		'
	}
}

# deduplicate array fields
filter {
	# add arbitrary tags so the ruby script can uniq them
	mutate {
		add_tag => [ "SomeTag", "SomeTag", "SomeTagAgain", "SomeTagAgain" ]
	}
	ruby {
		id => "ruby_deduplicate_tags"
		code => '
			# set the array to a unique (uniq) set of itself
			event.set("[tags]", event.get("[tags]").uniq)
		'
	}
}

# removing fields
filter {
	ruby {
		id => "ruby_removefield"
		code => '
			# remove nested value (includes key/value hashes inside arrays)
			event.remove("[event][sequence]")
			# remove entire top-level key
			event.remove("[event]")
		'
	}
}

# add the hostname of the logstash server if not present using a loose approximation of an ecs field
filter {
	ruby {
		id => "ruby_add_agentforwarder"
		init => '
			require "socket"
			@@hostname = Socket.gethostname
		'
		code => '
			event.set("[agent][forwarder]", @@hostname)
		'
	}
}


output {
	stdout { codec => rubydebug }
}

# iterate over every field and delete every non-string field
#filter {
#	ruby {
#		code => '
#			# loop over every field and delete all non-strings
#			# hash = ruby term for kv pair
#			hash = event.to_hash
#			hash.each do |key,val|
#				# all strings
#				#if val.is_a?(String) && key != "@timestamp"
#				# non-strings
#				#if !val.is_a?(String) && key != "@timestamp"
#				if key != "@timestamp"
#					event.remove(key)
#				end
#			end
#			
#		"
#	}
#}
