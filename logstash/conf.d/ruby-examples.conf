# https://www.elastic.co/guide/en/logstash/current/plugins-filters-ruby.html
#	sudo bin/logstash -f conf.d/ruby-examples.conf --config.test_and_exit
#	sudo bin/logstash -f conf.d/ruby-examples.conf --config.reload.automatic

input {
	generator {
		ecs_compatibility => "v8"
	}
}

filter {
	#
	#
	# add arbitrary tags so the ruby script can count them
	mutate {
		add_tag => [ "tag-001", "tag-002" ]
	}
	#
	#
	ruby {
		code => "

			# this is an inline comment
			# remember to use single quotes because the code block is wrapped in double quotes (or vice versa)

			# event.get('[field]')
			# event.get('[field]').method
			# variable = event.get('[field]').method
			# event.set('[field]', value)

			# length of an array
			event.set('[tag_length]', event.get('[tags]').length)
			# count of an array - same and length but can start at an offset
			event.set('[tag_count]', event.get('[tags]').count)

			# join an array into a string with a delimiter
			event.set('[tags_joined]', event.get('[tags]').join('JOINEDATTHEHIP'))

			# downcase (lowercase)
			event.set('[tags_joined_downcase]', event.get('[tags_joined]').downcase)
			# upcase (uppercase)
			event.set('[tags_joined_upcase]', event.get('[tags_joined]').upcase)
			# capitalize the first letter)
			event.set('[tags_joined_capitalize]', event.get('[tags_joined]').capitalize)

			# split a string based on a delimiter
			event.set('[tags_unjoined_array]', event.get('[tags_joined]').split('JOINEDATTHEHIP'))
			# split then re-join with a new delimiter
			event.set('[tags_unjoined_rejoined]', event.get('[tags_joined]').split('JOINEDATTHEHIP').join(' '))

			# for-each loop
			# creates new fields with upcase values based for each tag in [tags]
			event.get('[tags_unjoined_array]').each do |item|
				if item == 'tag-001'
					event.set('[supertag]', item.upcase)
				elsif item == 'tag-002'
					# note [uberfield] gets deleted further down in the code
					event.set('[ubertag]', item.upcase)					
				end
			end

			# append to an array using <<
            temptags = event.get('[tags]') << event.get('[tags]').length
            event.set('[tags]', temptags )
			# same as above, but as a one-liner
			event.set('[tags]', (event.get('[tags]') << event.get('[tags]').length) )

			# if-elsif-else (NOT elseif)
			if event.get('[tags]').count == 4
				tttt = event.get('[tags][0]')
				event.set('[tags]', (event.get('[tags]') << tttt.length) )
				# cast as string with to_s method
				event.set('[tttt]', tttt.to_s)
			end

			# key/value 'hash' loop
			# instead of .each, use .each_with_index to access the index value
			# loops over [tags_unjoined_array] and uses the array items as keys, and accesses the index as a value (index is not available in .each)
			event.get('[tags_unjoined_array]').each_with_index do |key,val|
				# field [tag-002] will have the value '1' (second index), but [tag-001] will not be created
				if val == 1
					# arbitrarily multiply the index value
					v = val*47
					# to_s converts to a string, but it also takes a base argument
					# to_s(2) would convert to binary
					# to_s(16) would convert to hex
					# prepend 0x, convert to hex, then upcase
					v = '0x' + v.to_s(16).upcase
					event.set(key, v)
				end
			end
			# expected output: tags-002 = 0x2F

			# remove a field
			event.remove('[ubertag]')

			# remove nested value (includes key/value 'hashes' inside arrays)
			event.remove('[tags][4]')
		"
	}
}

# deduplicate array fields
filter {
	#
	#
	# add arbitrary tags so the ruby script can uniq them
	mutate {
		add_tag => [ "SomeTag", "SomeTag", "SomeTagAgain", "SomeTagAgain" ]
	}
	#
	#
	ruby {
		code => "
			# set the array to a unique (uniq) set of itself
			event.set('[tags]', event.get('[tags]').uniq)
		"
	}
}

# add the hostname of the logstash server if not present using a loose approximation of an ecs field
filter {
	ruby {
		init => "
			require 'socket'
			@@hostname = Socket.gethostname
		"
		code => "
			event.set('[agent][forwarder]', @@hostname)
		"
	}
}

# iterate over every field and delete every non-string field
#filter {
#	ruby {
#		code => "
#			# loop over every field and delete all non-strings
#			# hash = ruby term for kv pair
#			hash = event.to_hash
#			hash.each do |key,val|
#				# all strings
#				#if val.is_a?(String) && key != '@timestamp'
#				# non-strings
#				#if !val.is_a?(String) && key != '@timestamp'
#				if key != '@timestamp'
#					event.remove(key)
#				end
#			end
#			
#		"
#	}
#}

output {
	stdout { codec => rubydebug }
}
