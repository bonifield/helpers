#================================================
#
# faster threat feed enrichment using filebeat, logstash, and memcached
#
# *** ensure memcached nodes backup to disk, otherwise the cache will empty if an outage occurs ***
#
# workflow:
#	filebeat uses the threatintel module to acquire indicators
#	filebeat decodes message into processed.* (see end of file)
#	filebeat sends events to Logstash
#	logstash sets key/value pairs in memcached
#	memcached periodically backs up to disk (potentially a few gigabytes of disk space used since ttl is 30 days)
#	main logstash pipelines use "getter" filters when interesting fields exist (see end of file)
#
# testing:
#	bin/logstash -f conf.d/memcached-threatintel-setter.conf --config.test_and_exit
#	bin/logstash -f conf.d/memcached-threatintel-setter.conf --config.reload.automatic
#
# references:
#	https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-threatintel.html
#	https://www.elastic.co/guide/en/logstash/current/plugins-filters-memcached.html
#	https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-memcached-on-ubuntu-22-04
#
#================================================

input {
	beats {
		port => 5044
	}
}

filter {
	# use filebeat's threatintel module to pull data, then send it to logstash
	# indicators, such as hashes, will be the keys in memcached
	# the value for each indicator will be a dynamically generated string, which will become rule.name
	if [service][type] == "threatintel" and "threatintel" in [tags] {
		# create the default value
		mutate {
			add_field => { "[labels][enrichment_value]" => "%{[service][type]}-%{[fileset][name]}" }
		}
		# append processed.signature if able
		if [processed][signature] {
			mutate {
				update => { "[labels][enrichment_value]" => "%{[labels][enrichment_value]}-%{[processed][signature]}" }

			}
		}
		# append processed.file_type if able
		if [processed][file_type] and [processed][file_type] != "unknown" {
			mutate {
				update => { "[labels][enrichment_value]" => "%{[labels][enrichment_value]}-%{[processed][file_type]}" }
			}
		}
		#
		# set cache objects when able
		# value (the dynamic string labels.enrichment_value) => key (use variable format to use the actual indicator)
		# 60 seconds * 60 minutes * 24 hours * 30 days = 2,592,000 seconds
		# ttl is set per namespace, can be tuned up or down
		#
		# store sha256 hashes
		if [processed][sha256_hash] {
			memcached {
				namespace => "sha256"
				ttl => 2592000
				set => {
					"[labels][enrichment_value]" => "%{[processed][sha256_hash]}"
				}
			}
		}
		# store md5 hashes
		if [processed][md5_hash] {
			memcached {
				namespace => "md5"
				ttl => 2592000
				set => {
					"[labels][enrichment_value]" => "%{[processed][md5_hash]}"
				}
			}
		}
		# store md5 hashes
		if [processed][md5_hash] {
			memcached {
				namespace => "md5"
				ttl => 2592000
				set => {
					"[labels][enrichment_value]" => "%{[processed][md5_hash]}"
				}
			}
		}
		# store import table hashes
		if [processed][imphash] {
			memcached {
				namespace => "imphash"
				ttl => 2592000
				set => {
					"[labels][enrichment_value]" => "%{[processed][imphash]}"
				}
			}
		}
		# store ssdeep hashes
		if [processed][ssdeep] {
			memcached {
				namespace => "ssdeep"
				ttl => 2592000
				set => {
					"[labels][enrichment_value]" => "%{[processed][ssdeep]}"
				}
			}
		}
		# store urls (full)
		if [processed][url] {
			memcached {
				namespace => "url"
				ttl => 2592000
				set => {
					"[labels][enrichment_value]" => "%{[processed][url]}"
				}
			}
		}
		# store hosts (domains)
		if [processed][host] {
			memcached {
				namespace => "domain"
				ttl => 2592000
				set => {
					"[labels][enrichment_value]" => "%{[processed][host]}"
				}
			}
		}
		# cleanup, unless keeping message is desired
		mutate {
			remove_field => [ "[message]" ]
		}
	}
}

output {
	# be sure to store threatintel results in elasticsearch for reference
	stdout { codec => rubydebug }
}

##############
# filebeat tags and processor to decode the message field into processed.*
##############

#tags: ["ti", "threatintel"]
#processors:
#  - decode_json_fields:
#      fields: [ "message" ]
#      process_array: true
#      max_depth: 25
#      target: "processed"
#      overwrite_keys: false
#      add_error_key: true

##############
# getter filter for other pipelines
##############
#filter {
#	# use file.hash.sha256 as the key to lookup
#	# if found, populate rule.name (previously set to labels.enrichment_value)
#	# read the key containing the value of file.hash.sha256 and save the value in rule.name
#	memcached {
#		namespace => "sha256"
#		get => {
#			"%{[file][hash][sha256]}" => "[rule][name]"
#		}
#		add_tag => [ "threatintel_hit" ]
#	}
#}
