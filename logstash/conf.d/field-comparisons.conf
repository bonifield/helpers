# various examples of field/value comparison checks
# tested with 8.X
#
# bin/logstash -f conf.d/field-comparisons.conf --config.test_and_exit
# bin/logstash -f conf.d/field-comparisons.conf --config.reload.automatic

input {
	generator {
		ecs_compatibility => "v8"
		count => 1
	}
}

# cleanup and generate sample data
filter {
	mutate {
		remove_field => [ "@timestamp", "@version", "[event]", "[host]" ]
	}
	mutate {
		# event.code is a string, despite being a number not wrapped in quotes
		# host.ip is an array field
		add_field => {
			"[tags]" => [ "logstash-is-great" ]
			"[host][name]" => "MyHostname"
			"[log][file][path]" => "/var/log/auth.log"
			"[event][code]" => 1
			"[host][ip]" => [ "192.168.99.99", "fe80::1234:5678:1a:2bcd" ]
		}
	}

}

# perform field comparisons
filter {
	# tag 1 - field existence
	# works
	if [event][code] and ![source][ip] {
		mutate {
			add_tag => [ "check for field existence by referencing it alone or with !" ]
		}
	}
	# tag 2 - check equality
	# works
	mutate {
		convert => { "[event][code]" => "integer" }
	}
	if [event][code] == 1 {
		mutate {
			add_tag => [ "wrap strings in quotes, but don't wrap integers and floats; parenthetical grouping is supported" ]
		}
	}
	# tag 3 - check inequality
	# works 
	if [event][code] != 2 {
		mutate {
			add_tag => [ "inequality checks include != , !~ , and not, not in" ]
		}
	}
	# tag 4 - check field in array of terms
	# works 
	if [host][name] in [ "MyHostname", "MyOtherHostname", "YetAnotherHostname" ] {
		mutate {
			add_tag => [ "arrays of terms must have more than one value" ]
		}
	}
	# tax 5 - string in field
	# works
	if "My" in [host][name] {
		mutate {
			add_tag => [ "check for a whole or partial string in a field" ]
		}
	}
	# tax 6 - field in string
	# works
	if [host][name] in "MyHostnameIsAwesome" {
		mutate {
			add_tag => [ "check for a field in a string" ]
		}
	}
	# tag 7 - check static value in array fields
	# works
	if "logstash-is-great" in [tags] {
		mutate {
			add_tag => [ "arrays of terms must have more than one value" ]
		}
	}
	# tag 8
	# works - regex with one or more checks, and case-insensitive matches
	# /checkeditem/
	# /checkeditem1|checkeditem2|etc/
	# /checkeditem1|checkeditem2|(?i)CaseInsentiveCheckedItem1|.../
	# everything to the RIGHT of the first "(?i)" will be checked case-insensitive, and everything to the LEFT will not
	# /(?i)HeLlO|WORLD/ would use a case-insensitive check for BOTH "HeLlO" and "WORLD"
	# /HeLlO|(?i)WORLD/ would use a case-insensitive check for ONLY "WORLD"
	if [message] =~ /(?i)HeLlO|WORLD/ {
		mutate {
			add_tag => [ "place regex in forward slashes; if using multiple terms, use pipe delimiters" ]
		}
	}
	# tag 9 - be sure to escape slashes and dots in regex checks
	# works
	# regex interpets dots (.) as "one or more of any character", which would match auth.log and authXlog
	if [log][file][path] =~ /(?i)auth\.log|\/var\/log\/auth\.log/ {
		mutate {
			add_tag => [ "be sure to escape slashes and dots in regex checks" ]
		}
	}
	# tags 10 and 11 - use Ruby for comparing arrays
	# works
	ruby {
		code => '
			# for-each loop
			event.get("[host][ip]").each do |item|
				if item == "192.168.99.99"
					# tag 10
					event.set("[tags]", event.get("[tags]") << "use Ruby to check array fields to arrays")
				elsif item == "fe80::1234:5678:1a:2bcd"
					# tag 11
					event.set("[tags]", event.get("[tags]") << "use Ruby to iterate over all items in an array field")
				end
			end
		'
	}
	#
	#
	# things that DO NOT work below this
	#
	#
	# does NOT work - you cannot check an array of terms with only one item
	if [host][name] in [ "MyHostname" ] {
		mutate {
			add_tag => [ "this will not work" ]
		}
	}
	# does NOT work - you cannot check an array field against another array
	if [tags] in [ "abcd", "efgh" ] {
		mutate {
			add_tag => [ "this will not work" ]
		}
	}
	# does NOT work - you cannot check an array field against another array even if all values appear in both the field and array
	if [host][ip] in [ "192.168.99.99", "fe80::1234:5678:1a:2bcd" ] {
		mutate {
			add_tag => [ "this will not work" ]
		}
	}
	# does NOT work - you cannot check an array field using regex statements
	if [host][ip] =~ /192\.168\.99\.99|(?i)fe80::1234:5678:1a:2bcd/ {
		mutate {
			add_tag => [ "this will not work" ]
		}
	}
}

output {
	stdout { codec => rubydebug }
}

# expected output
#
#{
#       "host" => {
#          "ip" => [
#            [0] "192.168.99.99",
#            [1] "fe80::1234:5678:1a:2bcd"
#        ],
#        "name" => "MyHostname"
#    },
#        "log" => {
#        "file" => {
#            "path" => "/var/log/auth.log"
#        }
#    },
#    "message" => "Hello world!",
#      "event" => {
#        "code" => 1
#    },
#       "tags" => [
#        [ 0] "logstash-is-great",
#        [ 1] "check for field existence by referencing it alone or with !",
#        [ 2] "wrap strings in quotes, but don't wrap integers and floats; parenthetical grouping is supported",
#        [ 3] "inequality checks include != , !~ , and not, not in",
#        [ 4] "arrays of terms must have more than one value",
#        [ 5] "check for a whole or partial string in a field",
#        [ 6] "check for a field in a string",
#        [ 7] "arrays of terms must have more than one value",
#        [ 8] "place regex in forward slashes; if using multiple terms, use pipe delimiters",
#        [ 9] "be sure to escape slashes and dots in regex checks",
#        [10] "use Ruby to check array fields to arrays",
#        [11] "use Ruby to iterate over all items in an array field"
#    ]
#}
