# tested with v8.5.2
# https://www.elastic.co/guide/en/logstash/current/plugins-filters-cidr.html
#	bin/logstash -f conf.d/cidr-checks.conf --config.test_and_exit
#	bin/logstash -f conf.d/cidr-checks.conf --config.reload.automatic

input {
	generator {
		ecs_compatibility => "v8"
	}
}

# add the forwarding logstash information
filter {
	ruby {
		init => "
			require 'socket'
			@@hostname = Socket.gethostname
		"
		code => "
			event.set('[agent][forwarder]', @@hostname)
		"
	}
}

filter {
	# add sample data
	mutate {
		add_field => {
			"[source][ip]" => "192.168.20.20"
			"[destination][ip]" => "8.8.8.8"
		}
	}
	# tag based on direction
	# if both labels.source and labels.destination are "external", verify the cidrs.txt file is accurate, or remove external tagging if ingesting any data that falls outside the ranges in cidrs.txt
	if [source][ip] {
		cidr {
			# load address to check as the value of source.ip
			address => [ "%{[source][ip]}" ]
			# do not use network and network_path
			#network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
			# network_path is a file containing a single column of networks in CIDR notation, one per line with NO QUOTES (tested, will cause errors)
			network_path => "/some/path/to/config/cidrs.txt"
			refresh_interval => 5
			add_tag => [ "source_internal" ]
			add_field => { "[labels][source]" => "internal" }
		}
		if "source_internal" not in [tags] {
			mutate {
				add_tag => [ "source_external" ]
				add_field => { "[labels][source]" => "external" }
			}
		}
	}
	if [destination][ip] {
		cidr {
			# load address to check as the value of destination.ip
			address => [ "%{[destination][ip]}" ]
			# do not use network and network_path
			#network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
			# network_path is a file containing a single column of networks in CIDR notation, one per line with NO QUOTES (tested, will cause errors)
			network_path => "/some/path/to/config/cidrs.txt"
			refresh_interval => 5
			add_tag => [ "destination_internal" ]
			add_field => { "[labels][destination]" => "internal" }
		}
		if "destination_internal" not in [tags] {
			mutate {
				add_tag => [ "destination_external" ]
				add_field => { "[labels][destination]" => "external" }
			}
		}
	}
}

output {
	stdout { codec => rubydebug }
}
