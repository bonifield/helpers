# tested with v8.5.2
# https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-split
#	sudo bin/logstash -f conf.d/field-split.conf --config.test_and_exit
#	sudo bin/logstash -f conf.d/field-split.conf --config.reload.automatic

input {
	generator {
		ecs_compatibility => "v8"
	}
}

# add the forwarding logstash information
filter {
	ruby {
		init => "
			require 'socket'
			@@hostname = Socket.gethostname
		"
		code => "
			event.set('[agent][forwarder]', @@hostname)
		"
	}
}

# create user.domain and user.name from a single string such as winlog.event_data.User
filter {
	#
	# the order of operations when using split matters, which is not fully described in official documentation
	# it is strongly recommended to encapsulate these actions in their own filter block
	#
	# create field to split
	mutate {
		add_field => {
			"[winlog][event_data][User]" => "domain\user"
		}
	}
	# copy the field to be split into a temp field which can then be deleted
	mutate {
		copy => {
			"[winlog][event_data][User]" => "[untemp]"
		}
	}
	if [winlog][event_data][User] and ![user][domain] and ![user][name] {
		# replace the back slash with a forward slash for the mutate split
		mutate {
			gsub => [ "[untemp]", "[\\]", "/" ]
		}
		mutate {
			split => [ "[untemp]", "/" ]
			add_field => {
				"[user][domain]" => "%{[untemp][0]}"
				"[user][name]" => "%{[untemp][1]}"
			}
		}
		# alternatively use ruby to access index positions and repair the original field
		ruby {
			code => "

					# array slicing
					event.set('[user][domain_slice]', event.get('[untemp]')[0])
					event.set('[user][user_slice]', event.get('[untemp]')[-1])

					# first and last functions
					event.set('[user][domain_function]', event.get('[untemp]').first())
					event.set('[user][user_function]', event.get('[untemp]').last())

					# restore original field if a temp field was not created
					#orig = event.get('[winlog][event_data][User]').join('\\')
					#event.set('[winlog][event_data][User]', orig)

				"
		}
		# cleanup
		mutate {
			remove_field => [ "[untemp]" ]
		}
	}
}

#
#
#
# THE FOLLOWING TWO FILTER BLOCKS ARE IDENTICAL
# EXCEPT FOR SPECIFYING PARENT AND CHILD FIELDS
#
#
#

# parent fields
# create process.parent.executable, process.parent.name, and non-ECS fields process.parent.path, process.parent.path_depth, and process.parent.path_length from a single string such as winlog.event_data.ParentImage
# attempts basic handling of windows local, windows unc, and linux paths in one block
filter {
	# create field to split
	mutate {
		add_field => {
			"[winlog][event_data][ParentImage]" => "C:\Windows\System32\cmd.exe"
			#"[winlog][event_data][ParentImage]" => "\\someuncname\c$\Windows\System32\cmd.exe"
			#"[winlog][event_data][ParentImage]" => "/usr/local/bin/python999"
		}
	}
	if [winlog][event_data][ParentImage] and ![process][parent][executable] and ![process][parent][name] {
		# add process.executable
		mutate {
			add_field => {
				"[process][parent][executable]" => "%{[winlog][event_data][ParentImage]}"
			}
		}
		# use ruby to access necessary index positions
		ruby {
			code => "

					# create a temp variable for readability
					tempimage = event.get('[winlog][event_data][ParentImage]')

					# set a variable based on slash type detected
					if tempimage =~ /\\/
						use_this_slash = '\\'
						# set a variable for unc paths
						if tempimage =~ /\\\\/
							unc_path = true
						end
					else
						use_this_slash = '/'
					end

					# standardize all post-split logic using forward slashes
					tempimage = tempimage.gsub('\\', '/')
					# temporarily suppress leading slashes in unc paths
					if unc_path
						tempimage = tempimage.gsub('//', '')
					end
					# create an array
					tempimage = tempimage.split('/')

					# set process.parent.name
					event.set('[process][parent][name]', tempimage.last())

					# set process.parent.path_depth
					if use_this_slash == '/'
						event.set('[process][parent][path_depth]', tempimage[0..-3].length)
					else
						event.set('[process][parent][path_depth]', tempimage[0..-2].length)
					end

					# set process.parent.path and process.parent.path_length
					out = ''
					excludethis = tempimage.last()
					# loop over the array, and reform the path string with everything except the last item (process.parent.name)
					tempimage.each do |item|
						if item != excludethis
							out << item + use_this_slash
							# also works
							#out = out + item + use_this_slash
						end
					end
					# prepend the backslashes in unc strings
					if unc_path
						out = '\\\\' + out
					end
					event.set('[process][parent][path]', out)
					event.set('[process][parent][path_length]', out.length)

					# alternative way without a loop using a slice then join
					out2 = tempimage[0..-2].join(use_this_slash) + use_this_slash
					if unc_path
						out2 = '\\\\' + out2
					end
					event.set('[process][parent][path_noloop]', out2)
					event.set('[process][parent][path_noloop_length]', out2.length)

					# add a tag if a unc path was found
					if unc_path
						if event.get('[tags]')
							event.set('[tags]', (event.get('[tags]') << 'unc_path'))
						elsif event.get('[tags]') == nil
							event.set('[tags]', ['unc_path'])
						end
					end

				"
		}
	}
}

# child fields
# create process.executable, process.name, and non-ECS fields process.path, process.path_depth, and process.path_length from a single string such as winlog.event_data.Image
# attempts basic handling of windows local, windows unc, and linux paths in one block
filter {
	# create field to split
	mutate {
		add_field => {
			#"[winlog][event_data][Image]" => "C:\Program Files\Windows Media Player\wmplayer.exe"
			"[winlog][event_data][Image]" => "\\someuncname\c$\Program Files\Windows Media Player\wmplayer.exe"
			#"[winlog][event_data][Image]" => "/usr/local/bin/python3"
		}
	}
	if [winlog][event_data][Image] and ![process][executable] and ![process][name] {
		# add process.executable
		mutate {
			add_field => {
				"[process][executable]" => "%{[winlog][event_data][Image]}"
			}
		}
		# use ruby to access necessary index positions
		ruby {
			code => "

					# create a temp variable for readability
					tempimage = event.get('[winlog][event_data][Image]')

					# set a variable based on slash type detected
					if tempimage =~ /\\/
						use_this_slash = '\\'
						# set a variable for unc paths
						if tempimage =~ /\\\\/
							unc_path = true
						end
					else
						use_this_slash = '/'
					end

					# standardize all post-split logic using forward slashes
					tempimage = tempimage.gsub('\\', '/')
					# temporarily suppress leading slashes in unc paths
					if unc_path
						tempimage = tempimage.gsub('//', '')
					end
					# create an array
					tempimage = tempimage.split('/')

					# set process.name
					event.set('[process][name]', tempimage.last())

					# set process.path_depth
					if use_this_slash == '/'
						event.set('[process][path_depth]', tempimage[0..-3].length)
					else
						event.set('[process][path_depth]', tempimage[0..-2].length)
					end

					# set process.path and process.path_length
					out = ''
					excludethis = tempimage.last()
					# loop over the array, and reform the path string with everything except the last item (process.name)
					tempimage.each do |item|
						if item != excludethis
							out << item + use_this_slash
							# also works
							#out = out + item + use_this_slash
						end
					end
					# prepend the backslashes in unc strings
					if unc_path
						out = '\\\\' + out
					end
					event.set('[process][path]', out)
					event.set('[process][path_length]', out.length)

					# alternative way without a loop using a slice then join
					out2 = tempimage[0..-2].join(use_this_slash) + use_this_slash
					if unc_path
						out2 = '\\\\' + out2
					end
					event.set('[process][path_noloop]', out2)
					event.set('[process][path_noloop_length]', out2.length)

					# add a tag if a unc path was found
					if unc_path
						if event.get('[tags]')
							event.set('[tags]', (event.get('[tags]') << 'unc_path'))
						elsif event.get('[tags]') == nil
							event.set('[tags]', ['unc_path'])
						end
					end

				"
		}
	}
}

# deduplicate tags
filter {
ruby {
		code => "
			# set the array to a unique (uniq) set of itself
			event.set('[tags]', event.get('[tags]').uniq)
		"
	}
}

output {
	stdout { codec => rubydebug }
}
