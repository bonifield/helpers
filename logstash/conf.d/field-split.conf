# tested with v8.5.2
# https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-split
#	sudo bin/logstash -f conf.d/field-split.conf --config.test_and_exit
#	sudo bin/logstash -f conf.d/field-split.conf --config.reload.automatic

input {
	generator {
		ecs_compatibility => "v8"
	}
}

# add the forwarding logstash information
filter {
	ruby {
		init => "
			require 'socket'
			@@hostname = Socket.gethostname
		"
		code => "
			event.set('[agent][forwarder]', @@hostname)
		"
	}
}

# create user.domain and user.name from a single string such as winlog.event_data.User
filter {
	#
	# the order of operations when using split matters, which is not fully described in official documentation
	# it is strongly recommended to encapsulate these actions in their own filter block
	#
	# create field to split
	mutate {
		add_field => {
			"[basename]" => "domain\user"
		}
	}
	if [basename] and ![user][domain] and ![user][name] {
		# replace the back slash with a forward slash for the mutate split
		mutate {
			gsub => [ "[basename]", "[\\]", "/" ]
		}
		mutate {
			split => [ "[basename]", "/" ]
			add_field => {
				"[user][domain]" => "%{[basename][0]}"
				"[user][name]" => "%{[basename][1]}"
			}
		}
		# alternatively use ruby to access index positions
		ruby {
			code => "

					# array slicing
					event.set('[ruby_domain_slice]', event.get('[basename]')[0])
					event.set('[ruby_user_slice]', event.get('[basename]')[-1])

					# first and last functions
					event.set('[ruby_domain_function]', event.get('[basename]').first())
					event.set('[ruby_user_function]', event.get('[basename]').last())

				"
		}
		# cleanup
		mutate {
			remove_field => [ "[basename]" ]
		}
	}
}

output {
	stdout { codec => rubydebug }
}
