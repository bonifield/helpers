# bin/logstash -f conf.d/tcp-syslog-tls.conf --config.test_and_exit
# bin/logstash -f conf.d/tcp-syslog-tls.conf --config.reload.automatic

input {
	# accept TLS connections on TCP/51443; act as a syslog server
	tcp {
		port => 51443
		# type only adds a top-level field, it doesn't do any parsing or processing
		type => syslog
		mode => server
		ssl_enabled => true
		# server mode only; client mode, use ssl_verification_mode => "full"
		ssl_client_authentication => "required"
		ssl_certificate => "/path/cert.pem"
		ssl_key => "/path/key.pem"
		# only use ssl_key_passphrase if the key is encrypted, otherwise it will error
		ssl_key_passphrase => "abcd1234"
		ssl_certificate_authorities => [ "/path/ca-chain.cert.pem" ]
	}
}

filter {
	if [event][original] == [message] {
		mutate {
			remove_field => ["message"]
		}
	}
}

filter {
	# parse event.original
	grok {
		match => {
			"[event][original]" => "<%{POSINT:[log][syslog][priority]}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:[host][name]} %{GREEDYDATA:message}"
		}
	}
	# parse message (basic); work from most complex, to least complex
	grok {
		match => {
			"[message]" => [
				"%{DATA:[process][name]}\[%{DATA:[process][pid]}\]:.*",
				"%{DATA:[process][name]}:.*"
			]
		}
	}
	# use timestamp from syslog message, instead of when Logstash received it
	date {
		match => [ "[syslog_timestamp]", "yyyy-MM-dd HH:mm:ss.SSS Z", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601" ]
	}
}

output {
	# send data elsewhere or display on stdout
	stdout { codec => rubydebug }
}
