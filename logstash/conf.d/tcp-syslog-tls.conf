# bin/logstash -f conf.d/tcp-syslog-tls.conf --config.test_and_exit
# bin/logstash -f conf.d/tcp-syslog-tls.conf --config.reload.automatic

input {
	# accept TLS connections on TCP/51443; act as a syslog server
	tcp {
		port => 51443
		# type only adds a top-level field, it doesn't do any parsing or processing
		type => "syslog-tcp"
		mode => server
		ssl_enabled => true
		# server mode only; client mode, use ssl_verification_mode => "full"
		ssl_client_authentication => "required"
		ssl_certificate => "/path/cert.pem"
		ssl_key => "/path/key.pem"
		# only use ssl_key_passphrase if the key is encrypted, otherwise it will error
		ssl_key_passphrase => "abcd1234"
		ssl_certificate_authorities => [ "/path/ca-chain.cert.pem" ]
	}
}

# generate RFC3164 test data
input {
	generator {
		count => 1
		lines => [
			"<13>ServerOne Uno",
			"<14>Jan 21 17:54:03 ServerTwo MyProgram:dos dos no space with colon",
			"<14>Jan 21 17:54:03 ServerTwo MyProgram dos dos with space no colon",
			"<191>Jan 22 18:31:22 ServerThree MyProgram: tres tres tres no pid",
			"<191>Jan 22 18:31:22 ServerThree MyProgram[1234]: tres tres tres with pid",
			"Jan 22 18:31:22 ServerThree MyProgram[1234]: QUATROx4 NO PRI"
		]
	}
}

# cleanup prep for demo
filter {
	mutate {
		remove_field => [ "[event][sequence]", "[message]", "[host]", "@version" ]
	}
}

filter {
	grok {
		# order from most specific, to least specific
		match => {
			"[event][original]" => [
				":<%{POSINT:[log][syslog][priority]}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:[host][name]} %{DATA:[process][name]}(?:\[%{POSINT:[process][pid]}\]):%{GREEDYDATA:message}",
				"%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:[host][name]} %{DATA:[process][name]}(?:\[%{POSINT:[process][pid]}\]):%{GREEDYDATA:message}",
				"<%{POSINT:[log][syslog][priority]}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:[host][name]} %{DATA:[process][name]}:%{GREEDYDATA:message}",
				"<%{POSINT:[log][syslog][priority]}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:[host][name]} %{DATA:[process][name]} %{GREEDYDATA:message}",
				"<%{POSINT:[log][syslog][priority]}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:[host][name]} %{DATA:[process][name]}:%{GREEDYDATA:message}",
				"<%{POSINT:[log][syslog][priority]}>%{DATA:[host][name]} %{GREEDYDATA:message}"
			]
		}
	}
	if [log][syslog][priority] {
		syslog_pri {
			use_labels => "true"
			syslog_pri_field_name => "[log][syslog][priority]"
		}
	}
	# strip leading and trailing whitespace; workaround for messages missing the RFC5424-mandated space between tag and message
	mutate {
		strip => [ "[message]" ]
	}
	# use timestamp from syslog message, instead of when Logstash received it
	if [syslog_timestamp] {
		date {
			# specify timezone if not the same as Logstash clusters
			timezone => "Europe/Madrid"
			match => [ "[syslog_timestamp]", "yyyy-MM-dd HH:mm:ss.SSS Z", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601" ]
		}
	}
}

output {
	stdout { codec => rubydebug }
}
