# tested with v8.5.2
# https://www.elastic.co/guide/en/logstash/current/plugins-filters-mutate.html#plugins-filters-mutate-proc_order
# https://stackoverflow.com/questions/29009191/is-it-possible-to-do-a-case-insensitive-gsub
# https://ruby-doc.org/core-2.2.0/Regexp.html
#	sudo bin/logstash -f conf.d/csv-split-clean.conf --config.test_and_exit
#	sudo bin/logstash -f conf.d/csv-split-clean.conf --config.reload.automatic
#
# parse only desired data from a messy CSV into an array field
#

input {
	generator {
		ecs_compatibility => "v8"
		lines => [
			"MSKB #1234567,MSFT #MS23-1234567,CVE #2023-111111,cve #2023-222222,CVE-2023-222222"
		]
		count => 1
	}
}

# cleanup the event for demo purposes
filter {
	mutate {
		remove_field => [ "@version", "[event]", "[sequence]", "[host]" ]
	}
}

# split and clean the field into just the CVE numbers
filter {
	# check for a case-insensitive occurrence of "CVE"
	if [message] =~ /(?i)CVE/ {
		# make temporary field
		mutate {
			copy => { "[message]" => "[temp]" }
		}
		# split temporary field into an array
		mutate {
			split => [ "[temp]", "," ]
		}
		# iterate over the array, looking only for the CVE values, then clean them up and add them to a new labels.cve field
		ruby {
			code => '
				temp = event.get("[temp]")
				# must initialize the new array field first
				event.set("[labels][cve]", [])
				event.get("[temp]").each do |item|
					if item =~ /(?i)CVE/
						#item_cleaned = item.gsub("CVE \#", "")
						# case-insensitive gsub, broken into two statements based on format for readbility
						item_cleaned = item.gsub(/CVE \#/i, "").gsub(/CVE-/i, "")
						event.set("[labels][cve]", (event.get("[labels][cve]") << item_cleaned) )
					end
				end
				# set the array to a unique (uniq) set of itself
				event.set("[labels][cve]", event.get("[labels][cve]").uniq)
			'
		}
		# remove the temp field; we could also do this in the Ruby code above
		mutate {
			remove_field => [ "[temp]" ]
		}
	}
}

# add the forwarding logstash information
filter {
	ruby {
		init => "
			require 'socket'
			@@hostname = Socket.gethostname
		"
		code => "
			event.set('[agent][forwarder]', @@hostname)
		"
	}
}

output {
	stdout { codec => rubydebug }
}
