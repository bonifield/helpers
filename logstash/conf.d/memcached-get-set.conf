# memcached filter examples for Logstash
# store and/or retrieve cached data inside a pipeline
#
# bin/logstash -f conf.d/memcached-get-set.conf --config.test_and_exit
# bin/logstash -f conf.d/memcached-get-set.conf --config.reload.automatic
#
# https://www.elastic.co/guide/en/logstash/current/plugins-filters-memcached.html
# https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-memcached-on-ubuntu-22-04
# https://realpython.com/python-memcache-efficient-caching/
#
# just run Filebeat with default /var/log/* filestream and then the command
# watch -n 1 -d sudo ls
# to generate logs the move slow enough to watch

input {
	beats {
		port => 5044
	}
}

# add test data
filter {
	mutate {
		add_field => { "[test][name]" => "superadmin" }
	}
}

filter {
	#
	# enrich host-only logs with IP addresses from DHCP (or vice versa!)
	# read the key containing the value of host.name, and if it exists, save the value in host.ip
	memcached {
		namespace => "dhcp"
		get => {
			"%{[host][name]}" => "[host][ip]"
		}
	}
	#
	# feed useful host values back into the cache for network tools to use as enrichments
	# syntax is opposite from "get" - set test.name as the value for the key host.ip
	# ***DANGER*** TTL will keep getting refreshed using this method!
	if [host][ip] {
		memcached {
			namespace => "dhcp"
			# 60 seconds * 60 minutes * 24 hours = 86400 seconds (default Windows DHCP lease time)
			ttl => 86400
			set => {
				"[test][name]" => "%{[host][ip]}"
			}
		}
	}
	#
	# get some other useful enrichments for this IP added by other sources or pipelines
	# read the key containing the value of host.ip, and if it exists, save the value in user.name
	memcached {
		namespace => "dhcp"
		get => {
			"%{[host][ip]}" => "[user][name]"
		}
	}
}

output {
	stdout { codec => rubydebug }
}


##############
# memcached-set.py
# load values into memcached for ease of testing
##############

# from pymemcache.client import base
# client = base.Client(('localhost', 11211))
# client.set('dhcp:mytestbox', '192.168.50.19')
# c = client.get('dhcp:mytestbox')
# print(c.decode())
